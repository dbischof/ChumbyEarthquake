class ChumbyEarthquake {

	private static var feedUrl:String = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.atom";
	
	private static var scaleColors:Array = new Array(0xFFFFFF, 0xFFFFFF, 0x4CC900, 0x4CC900, 0xFFD800, 0xFF6A00, 0xFF7FED, 0xB200FF, 0xFF0000, 0xFF0000, 0x4800FF);
	private static var scaleLabels:Array = new Array("Micro", "Micro", "Minor", "Minor", "Light", "Moderate", "Strong", "Major", "Great", "Great", "Epic");
	
	private static var quakeOverlay:MovieClip;
	private static var infoBox:MovieClip;
	private static var aboutBox:MovieClip;
	private static var quakeBox:MovieClip;
	
	public static function main() {
		// Set stage scale mode to keep it from resizing
		//Stage.scaleMode = "noscale";
		
		// draw layout
		drawLayers();

		// asset ID strings are auto-generated by FDBuild and can be inserted into
		// the currently open code file by double-clicking a resource in the tree view.

		getUpdate();
		setInterval(getUpdate, 600000);	// 10 minutes
	}
	
	private static function drawLayers():Void {
		// the map
		var map:MovieClip = _root.attachMovie("library.map-small.png", "background", 1);
		map._x = 0;
        map._y = 0;
		
		// the earthquake locations overlay
		quakeOverlay = _root.createEmptyMovieClip("overlay", 2);
		quakeOverlay._x = 0;
		quakeOverlay._y = 0;
		
		// the loading message
		var format:TextFormat = new TextFormat("_sans", 14, 0x000000);
		format.bold = true;
		var loadingMsg:TextField = _root.createTextField("loading", 3, 0, 110, 320, 10);
		loadingMsg.autoSize = "center";
		loadingMsg.setNewTextFormat(format);
		loadingMsg.text = "Loading...";
		
		// the about button
		
		var aboutBtn:MovieClip = _root.createEmptyMovieClip("aboutBtn", 4);
		//format.color = 0xFFFFFF;
		format.size = 12;
		var aboutBtnLabel:TextField = aboutBtn.createTextField("aboutBtnLabel", 1, 0, 0, 10, 10);
		aboutBtnLabel.autoSize = "left";
		aboutBtnLabel.setNewTextFormat(format);
		aboutBtnLabel.text = "About";
		aboutBtn.onPress = function():Void { ChumbyEarthquake.showAboutBox(); }
		
		var width:Number = aboutBtnLabel._width;
		var height:Number = aboutBtnLabel._height;
		
		aboutBtn.beginFill(0x000000, 30);
		aboutBtn.moveTo(width, 0);
		aboutBtn.lineTo(width, height);
		aboutBtn.lineTo(0, height);
		aboutBtn.lineTo(0, 4);
		aboutBtn.curveTo(0, 0, 4, 0);
		aboutBtn.endFill();
		
		aboutBtn._x = 320 - width;
		aboutBtn._y = 240 - height;
	}
	
	private static function createInfoWindow() {
		// the info window
		infoBox = _root.createEmptyMovieClip("infobox", 1000);
		//infoBox.onPress = new Function() { };
		//infoBox.useHandCursor = false;
		infoBox._visible = false;
		infoBox._x = 0;
		infoBox._y = 0;
		
		infoBox.beginFill(0x000000, 40);
		
		infoBox.moveTo(0, 0);
		infoBox.lineTo(320, 0);
		infoBox.lineTo(320, 240);
		infoBox.lineTo(0, 240);
		
		var margin:Number = 20;
		var leftMargin:Number = margin;
		var rightMargin:Number = 320-margin;
		var topMargin:Number = margin;
		var bottomMargin:Number = 240 - margin;
		var curve:Number = 10;
		
        infoBox.moveTo(leftMargin+curve, topMargin);
		infoBox.lineTo(rightMargin-curve, topMargin);
		infoBox.curveTo(rightMargin, margin, rightMargin, topMargin+curve);
		infoBox.lineTo(rightMargin, bottomMargin-curve);
		infoBox.curveTo(rightMargin, bottomMargin, rightMargin-curve, bottomMargin);
		infoBox.lineTo(leftMargin+curve, bottomMargin);
		infoBox.curveTo(leftMargin, bottomMargin, leftMargin, bottomMargin-curve);
		infoBox.lineTo(leftMargin, topMargin+curve);
		infoBox.curveTo(leftMargin, topMargin, leftMargin+curve, topMargin);
        
        infoBox.endFill();
		
		infoBox.lineStyle(2, 0x000000);
		infoBox.beginFill(0xFFFFFF, 85);
		
        infoBox.moveTo(leftMargin+curve, topMargin);
		infoBox.lineTo(rightMargin-curve, topMargin);
		infoBox.curveTo(rightMargin, margin, rightMargin, topMargin+curve);
		infoBox.lineTo(rightMargin, bottomMargin-curve);
		infoBox.curveTo(rightMargin, bottomMargin, rightMargin-curve, bottomMargin);
		infoBox.lineTo(leftMargin+curve, bottomMargin);
		infoBox.curveTo(leftMargin, bottomMargin, leftMargin, bottomMargin-curve);
		infoBox.lineTo(leftMargin, topMargin+curve);
		infoBox.curveTo(leftMargin, topMargin, leftMargin+curve, topMargin);
        
        infoBox.endFill();
		
		// the info window button
		var btn:MovieClip = infoBox.createEmptyMovieClip("button", 1001);
		var format = new TextFormat("_sans", 14, 0x000000);
		btn.createTextField("label", 1002, 0, 3, 50, 10);
		btn.label.autoSize = "center";
		//btn.label.embedFonts = true;
		btn.label.setNewTextFormat(format);
		btn.label.text = "Close";
		btn.lineStyle(2, 0x000000);
		btn.beginFill(0xFFFFFF, 100);
        btn.moveTo(5, 0);
		btn.lineTo(45, 0);
		btn.curveTo(50, 0, 50, 5);
		btn.lineTo(50, btn.label._height);
		btn.curveTo(50, btn.label._height + 5, 45, btn.label._height + 5);
		btn.lineTo(5, btn.label._height + 5);
		btn.curveTo(0, btn.label._height + 5, 0, btn.label._height);
		btn.lineTo(0, 5);
		btn.curveTo(0, 0, 5, 0);
		
        btn.endFill();
		btn.onPress = function():Void { ChumbyEarthquake.closeInfoWindow(); }
		//btn._x = 180 - Math.round(btn._width/2);
		btn._x = 160 - 25;
        btn._y = 215 - btn._height;
	}
	
	private static function closeInfoWindow() {
		infoBox._visible = false;
		_root.aboutBtn._visible = true;
		delete quakeOverlay.onPress;
	}
	
	private static function showAboutBox() {
		_root.aboutBtn._visible = false;
		quakeOverlay.onPress = new Function() { };
		quakeOverlay.useHandCursor = false;
		
		if (infoBox == null)
			createInfoWindow();
			
		if (aboutBox == null) {
			aboutBox = infoBox.createEmptyMovieClip("aboutBox", 1003);
			aboutBox._x = 30;
			aboutBox._y = 30;
		
			// the about info
			var format:TextFormat = new TextFormat("_sans", 14, 0x000000);
			format.bold = true;
			var aboutHeading:TextField = aboutBox.createTextField("aboutHeading", 1, 0, 0, 260, 10);
			aboutHeading.setNewTextFormat(format);
			aboutHeading.autoSize = "center";
			aboutHeading.text = "About";
			
			var aboutText:TextField = aboutBox.createTextField("aboutText", 2, 0, aboutHeading._height + 5, 260, 10);
			format.bold = false;
			format.size = 12;
			aboutText.setNewTextFormat(format);
			aboutText.multiline = true;
			aboutText.wordWrap = true;
			aboutText.autoSize = "left";
			var now:Date = new Date();
			aboutText.text = "Data source: USGS, " + (now.getFullYear()) + "\nMap source: Google & Europa Technologies, 2008";
			
			// the scale info
			
			var scaleHeading:TextField = aboutBox.createTextField("scaleHeading", 3, 0, aboutText._y + aboutText._height + 10, 260, 10);
			format.bold = true;
			format.size = 14;
			scaleHeading.setNewTextFormat(format);
			scaleHeading.autoSize = "center";
			scaleHeading.text = "Magnitude Scale";
			
			var scale:MovieClip = aboutBox.attachMovie("library.scale.png", "scale", 4);
			scale._x = 0;
			scale._y = scaleHeading._y + scaleHeading._height + 5;
			
			var scaleLabels:Array = new Array(2.5, 3, 4, 5, 6, 7, 8, 9, 10);
			format.bold = false;
			format.size = 10;
			var x:Number = 0;
			var y:Number = scale._y + scale._height;
			for (var i:Number = 0; i < scaleLabels.length; i++) {
				if (0 != i)
					x = 20 + 30 * (i - 1);
				
				var scaleLabel:TextField = aboutBox.createTextField("scaleLabel_"+Math.floor(scaleLabels[i]), 20+i, x, y, 10, 10);
				scaleLabel.setNewTextFormat(format);
				scaleLabel.autoSize = "left";
				scaleLabel.text = scaleLabels[i];
				//trace(scaleLabel._x + " " + scaleLabel._y);
			}
		}
		
		aboutBox._visible = true;
		quakeBox._visible = false;
		infoBox._visible = true;
	}
	
	private static function showQuakeBox(quake:ChumbyEarthquakeEvent) {
		_root.aboutBtn._visible = false;
		quakeOverlay.onPress = new Function() { };
		quakeOverlay.useHandCursor = false;
		
		if (infoBox == null)
			createInfoWindow();
			
		if (quakeBox == null) {
			quakeBox = infoBox.createEmptyMovieClip("quakeBox", 1100);
			quakeBox._x = 30;
			quakeBox._y = 30;
		
			// the about info
			var format:TextFormat = new TextFormat("_sans", 42, 0x000000);
			format.bold = true;
			var quakeMagnitude:TextField = quakeBox.createTextField("quakeMagnitude", 1, 0, -10, 120, 10);
			quakeMagnitude.setNewTextFormat(format);
			quakeMagnitude.autoSize = "center";
			
			format.size = 12;
			var quakeMagnitudeLabel:TextField = quakeBox.createTextField("quakeMagnitudeLabel", 2, 0, 0, 120, 10);
			quakeMagnitudeLabel.setNewTextFormat(format);
			quakeMagnitudeLabel.autoSize = "Center";
			
			format.align = "center"
			var quakeDescription:TextField = quakeBox.createTextField("quakeDescription", 3, 0, 0, 120, 10);
			quakeDescription.setNewTextFormat(format);
			quakeDescription.autoSize = "center";
			//quakeDescription.multiline = true;
			quakeDescription.wordWrap = true;
			
			format.bold = false;
			var quakeLocation:TextField = quakeBox.createTextField("quakeLocation", 4, 0, 0, 120, 10);
			quakeLocation.setNewTextFormat(format);
			quakeLocation.autoSize = "center";
			
			var quakeDate:TextField = quakeBox.createTextField("quakeDate", 5, 0, 0, 120, 10);
			quakeDate.setNewTextFormat(format);
			quakeDate.autoSize = "center";
			quakeDate.wordWrap = true;
		}
		var index:Number = quake.description.indexOf(" -");
		quakeBox.quakeMagnitude.text = quake.description.substring(0, index);
		
		
		var magnitude:Number = Math.floor(quake.magnitude);
		if (magnitude > 10)
			magnitude = 10;
		quakeBox.quakeMagnitudeLabel.text = scaleLabels[magnitude];
		quakeBox.quakeMagnitudeLabel._y = quakeBox.quakeMagnitude._height - 20;
		
		var description:String = quake.description.substring(index + 3);
		quakeBox.quakeDescription.text = quake.description.substr(index + 2, 1).toUpperCase() + description;
		quakeBox.quakeDescription._y = quakeBox.quakeMagnitudeLabel._y + quakeBox.quakeMagnitudeLabel._height + 5;
		
		var latLong:String = quake.lat + "," + quake.long;
		quakeBox.quakeLocation.text = latLong;
		quakeBox.quakeLocation._y = quakeBox.quakeDescription._y + quakeBox.quakeDescription._height;
		
		var date:String = quake.date;
		var search:Array = new Array("January", "February", "March", "April", /*"May", "June", "July",*/ "August", "September", "October", "November", "December");
		var replace:Array = new Array("Jan", "Feb", "Mar", "Apr", /*"May", "June", "July",*/ "Aug", "Sep", "Oct", "Nov", "Dec");
		var temp:Array = null;
		for (var i:Number = 0; i < search.length; i++) {
			temp = date.split(search[i]);
			date = temp.join(replace[i]);
		}
		quakeBox.quakeDate.text = date;
		quakeBox.quakeDate._y = quakeBox.quakeLocation._y + quakeBox.quakeLocation._height;
		//quakeBox.quakeDate.autoSize = "center";
		
		var mapInset:MovieClip = quakeBox.createEmptyMovieClip("mapInset", 20);
		mapInset._x = 130;
		mapInset._y = 0;
		// key for http://bluecarton.appspot.com
		mapInset.loadMovie("http://maps.google.com/staticmap?center=" + latLong + "&zoom=4&size=130x140&maptype=mobile&key=ABQIAAAAZVpzD2PQgr7GMAaRd4atVBSi9hWWhXD4kMB1VOjIlXlzfsQiihTq_7uJ0ZLZfD-uKexLQbLxCAu3xQ");
		
		var mapInsetOverlay:MovieClip = quakeBox.createEmptyMovieClip("mapInsetOverlay", 21);
		var centerX:Number = 195;//Math.round(mapInset._width / 2);
		var centerY:Number = 70;//Math.round(mapInset._height / 2);
		mapInsetOverlay.lineStyle(1, 0x000000);
		mapInsetOverlay.beginFill(scaleColors[magnitude]);
		mapInsetOverlay.moveTo(centerX-4, centerY);
		mapInsetOverlay.curveTo(centerX-4, centerY-4, centerX, centerY-4);
		mapInsetOverlay.curveTo(centerX+4, centerY-4, centerX+4, centerY);
		mapInsetOverlay.curveTo(centerX+4, centerY+4, centerX, centerY+4);
		mapInsetOverlay.curveTo(centerX-4, centerY+4, centerX-4, centerY);
		mapInsetOverlay.endFill();
		//mapInsetOverlay.swapDepths(mapInset);
		
		aboutBox._visible = false;
		quakeBox._visible = true;
		infoBox._visible = true;
	}
	
	private static function getUpdate() {
		var xml:XML = new XML();
		xml.ignoreWhite = true;
		xml.onLoad = function(success:Boolean):Void {
			if (success){
				//trace (xml);				// debug, remove when done
				if (xml.hasChildNodes()) {
					_root.loading._visible = false;
					ChumbyEarthquake.parseUpdate(xml);
				}
				else if (_root.loading._visible)
					_root.loading.text = "Loading failed; try again later.";
			}
			else {
				//trace("Connection failure");
				if (_root.loading._visible)
					_root.loading.text = "No connection; try again later.";
			}
		}
		
		xml.load(getURL());
	}
	
	private static function parseUpdate(xml:XML) {
		quakeOverlay.clear();
		var quakes:Array = new Array();
		
		//trace(xml);
		var parentNode:XMLNode = xml.firstChild;	// feed
		
		for (var i:Number = 0; i < parentNode.childNodes.length; i++) {
			var itemNode:XMLNode = parentNode.childNodes[i];
			
			if (itemNode.nodeName != "entry")
				continue;
			
			quakes.push(parseQuake(itemNode));
		}
		
		if (quakes.length != 0) {
			quakes.sort(ChumbyEarthquakeEvent.compare);
			
			for (var i:Number = 0; i < quakes.length; i++) {
				/*var magnitude:Number = quakes[i].magnitude;
				if (magnitude > 10)
					magnitude = 10;
				
				plotQuake(quakes[i].lat, quakes[i].long, scaleColors[Math.floor(magnitude)]);*/
				
				plotQuake(quakes[i]);
			}
		}
	}
	
	private static function getURL() {
		// Server no longer supports query string to defeat caching (throws 403 Forbidden)
		//var random:Number = Math.floor(Math.random() * 100);
		//return feedUrl + "?r=" + random;
		return feedUrl;
	}
	
	private static function parseQuake(node:XMLNode):ChumbyEarthquakeEvent {
		var description:String;
		var date:String;
		var lat:Number;
		var long:Number;
		
		node = node.firstChild;
		
		while (node != null) {
			if (node.nodeName == "title") {
				description = node.firstChild.toString();
			}
			else if (node.nodeName == "summary") {
				var cdata:String = node.firstChild.nodeValue;
				var pieces:Array = cdata.split("<dt>Time</dt><dd>");
				pieces = pieces[1].split("</dd>");
				date = pieces[0];
			}
			else if (node.nodeName == "georss:point") {
				var point:Array = node.firstChild.toString().split(" ");
				lat = Number(point[0]);
				long = Number(point[1]);
			}
			
			//trace(node.nodeName + " " + node.firstChild);
			node = node.nextSibling;
		}
		
		//trace(description + " " + date + " " + lat + " " + long);
		
		return new ChumbyEarthquakeEvent(description, date, lat, long);
	}
	
	//private static function plotQuake(lat:Number, long:Number, color:Number) {
	private static function plotQuake(quake:ChumbyEarthquakeEvent) {
		var overlay:MovieClip = quakeOverlay;
		var lat = quake.lat;
		var long = quake.long;
		
		var magnitude:Number = quake.magnitude;
		if (magnitude > 10)
			magnitude = 10;
		
		var color:Number = scaleColors[Math.floor(magnitude)];
		
		var x:Number = 160 + 0.88 * long;
		if (x <= -4 || x >= 324)
			return;
		
		/*
		The y scale is not equidistance on the Mercator projection.  Therefore, 
		we need to adjust the cale depending on the latitude.
		
		Lat  	y		y_delta
		 90		-42		82
		 70	 	 40		37
		 50	 	 77		23
		 30		100		20
		 10		120		10
		  0		130		 0
		-10		140		10
		-30		157		20
		-50		180		23
		-70		217		37
		-90		299		82
		 */
			
		var y:Number = 0;
		var y_factor:Number = 1;
		if (lat >= 0) {
			if (lat <= 10) {
				y = 130 - lat * y_factor;
			}
			else if (lat <= 30) {
				y = 120 - (lat - 10) * y_factor;
			}
			else if (lat <= 50) {
				y_factor = 23 / 20;
				y = 100 - (lat - 30) * y_factor;
			}
			else if (lat <= 70) {
				y_factor = 37 / 20;
				y = 77 - (lat - 50) * y_factor;
			}
			else {
				y_factor = 82 / 20;
				y = 40 - (lat - 70) * y_factor;
			}
		}
		else {
			lat = Math.abs(lat);
			if (lat <= 10) {
				y = 130 + lat * y_factor;
			}
			else if (lat <= 30) {
				y = 140 + (lat - 10) * y_factor;
			}
			else if (lat <= 50) {
				y_factor = 23 / 20;
				y = 157 + (lat - 30) * y_factor;
			}
			else if (lat <= 70) {
				y_factor = 37 / 20;
				y = 180 + (lat - 50) * y_factor;
			}
			else {
				y_factor = 82 / 20;
				y = 217 + (lat - 70) * y_factor;
			}
		}
		//trace(y);
		
		if (y <= -4 || y >= 244)
			return;
		
		//overlay.beginFill(color);
		//
		// large circle
        //overlay.moveTo(x, y - 4);
		//overlay.curveTo(x + 4, y -4 , x + 4, y);
		//overlay.curveTo(x + 4, y + 4, x, y + 4);
		//overlay.curveTo(x - 4, y + 4, x - 4, y);
		//overlay.curveTo(x - 4, y - 4, x, y - 4);
		//
		// small square
		///*overlay.moveTo(x - 1, y - 1);
		//overlay.lineTo(x - 1, y + 1);
		//overlay.lineTo(x + 1, y + 1);
		//overlay.lineTo(x + 1, y - 1);*/
        //
        //overlay.endFill();
		
		var quakeOverlay:MovieClip = overlay.createEmptyMovieClip(lat + "," + long, overlay.getNextHighestDepth());
		quakeOverlay.lineStyle(1, 0x000000);
		quakeOverlay.beginFill(color);
		quakeOverlay.moveTo(0, 4);
		quakeOverlay.curveTo(0, 0, 4, 0);
		quakeOverlay.curveTo(8, 0, 8, 4);
		quakeOverlay.curveTo(8, 8, 4, 8);
		quakeOverlay.curveTo(0, 8, 0, 4);
		quakeOverlay.endFill();
		quakeOverlay._x = x - 4;
		quakeOverlay._y = y - 4;
		quakeOverlay.quake = quake;
		quakeOverlay.onPress = function():Void { ChumbyEarthquake.showQuakeBox(this.quake); }
	}
}